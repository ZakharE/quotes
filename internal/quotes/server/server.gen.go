// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "plata_card_quotes/internal/quotes/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// GetLastQuoteParams defines parameters for GetLastQuote.
type GetLastQuoteParams struct {
	// BaseCurrency base currency
	BaseCurrency string `form:"baseCurrency" json:"baseCurrency"`

	// CounterCurrency counter currency
	CounterCurrency string `form:"counterCurrency" json:"counterCurrency"`
}

// RefreshQuoteJSONRequestBody defines body for RefreshQuote for application/json ContentType.
type RefreshQuoteJSONRequestBody = externalRef0.NewRefreshTask

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /quote)
	GetLastQuote(w http.ResponseWriter, r *http.Request, params GetLastQuoteParams)

	// (POST /quote/task)
	RefreshQuote(w http.ResponseWriter, r *http.Request)

	// (GET /quote/task/{id})
	GetTask(w http.ResponseWriter, r *http.Request, id int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /quote)
func (_ Unimplemented) GetLastQuote(w http.ResponseWriter, r *http.Request, params GetLastQuoteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /quote/task)
func (_ Unimplemented) RefreshQuote(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /quote/task/{id})
func (_ Unimplemented) GetTask(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetLastQuote operation middleware
func (siw *ServerInterfaceWrapper) GetLastQuote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLastQuoteParams

	// ------------- Required query parameter "baseCurrency" -------------

	if paramValue := r.URL.Query().Get("baseCurrency"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "baseCurrency"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "baseCurrency", r.URL.Query(), &params.BaseCurrency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseCurrency", Err: err})
		return
	}

	// ------------- Required query parameter "counterCurrency" -------------

	if paramValue := r.URL.Query().Get("counterCurrency"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "counterCurrency"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "counterCurrency", r.URL.Query(), &params.CounterCurrency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "counterCurrency", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLastQuote(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefreshQuote operation middleware
func (siw *ServerInterfaceWrapper) RefreshQuote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshQuote(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quote", wrapper.GetLastQuote)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/quote/task", wrapper.RefreshQuote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quote/task/{id}", wrapper.GetTask)
	})

	return r
}

type GetLastQuoteRequestObject struct {
	Params GetLastQuoteParams
}

type GetLastQuoteResponseObject interface {
	VisitGetLastQuoteResponse(w http.ResponseWriter) error
}

type GetLastQuote200JSONResponse externalRef0.QuoteData

func (response GetLastQuote200JSONResponse) VisitGetLastQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLastQuote404JSONResponse externalRef0.Error

func (response GetLastQuote404JSONResponse) VisitGetLastQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLastQuotedefaultJSONResponse struct {
	Body       externalRef0.Error
	StatusCode int
}

func (response GetLastQuotedefaultJSONResponse) VisitGetLastQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshQuoteRequestObject struct {
	Body *RefreshQuoteJSONRequestBody
}

type RefreshQuoteResponseObject interface {
	VisitRefreshQuoteResponse(w http.ResponseWriter) error
}

type RefreshQuote200JSONResponse externalRef0.RefreshTask

func (response RefreshQuote200JSONResponse) VisitRefreshQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshQuote400JSONResponse externalRef0.RefreshTask

func (response RefreshQuote400JSONResponse) VisitRefreshQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RefreshQuotedefaultJSONResponse struct {
	Body       externalRef0.Error
	StatusCode int
}

func (response RefreshQuotedefaultJSONResponse) VisitRefreshQuoteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTaskRequestObject struct {
	Id int64 `json:"id"`
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(w http.ResponseWriter) error
}

type GetTask200JSONResponse externalRef0.QuoteData

func (response GetTask200JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTask404JSONResponse externalRef0.Error

func (response GetTask404JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTask425JSONResponse externalRef0.Error

func (response GetTask425JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(425)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskdefaultJSONResponse struct {
	Body       externalRef0.Error
	StatusCode int
}

func (response GetTaskdefaultJSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /quote)
	GetLastQuote(ctx context.Context, request GetLastQuoteRequestObject) (GetLastQuoteResponseObject, error)

	// (POST /quote/task)
	RefreshQuote(ctx context.Context, request RefreshQuoteRequestObject) (RefreshQuoteResponseObject, error)

	// (GET /quote/task/{id})
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetLastQuote operation middleware
func (sh *strictHandler) GetLastQuote(w http.ResponseWriter, r *http.Request, params GetLastQuoteParams) {
	var request GetLastQuoteRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLastQuote(ctx, request.(GetLastQuoteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLastQuote")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLastQuoteResponseObject); ok {
		if err := validResponse.VisitGetLastQuoteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshQuote operation middleware
func (sh *strictHandler) RefreshQuote(w http.ResponseWriter, r *http.Request) {
	var request RefreshQuoteRequestObject

	var body RefreshQuoteJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshQuote(ctx, request.(RefreshQuoteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshQuote")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshQuoteResponseObject); ok {
		if err := validResponse.VisitRefreshQuoteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetTaskRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx, request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		if err := validResponse.VisitGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWwW7jNhD9FWJaIBdFctO0B93abFAEWCywbU5d7GFMjSxuJFLhjOIEhv+9GEqyN44R",
	"A8Vu2kvAkI8zjzNvnrwBG7o+ePLCUG6AbUMdpuV1jCHqoo+hpyiO0nZHzLgiXcpTT1ACS3R+BdttBpHu",
	"BxepgvLTDvg5m4Fh+YWswDaDD7T+k+pI3Nwi371MskQ+liEDGwYvFE9nTxH2+GMkPg5B6B0KvswfUVzQ",
	"xeP5KpxPN+s2oPx6qVfFdXR4rHv5rR4cchmjTbeOMXm1Fq7Sv3WIHQqU4Lxy2AVxXmhFMeU8iKtbztfp",
	"HTZ4QSu69Kjc4W+8azCa69Yx0QNkMMQWSmhE+rIoVk6aYZnb0BUj8Fp5VsQ2ul5c8FDCLbEYZHYr35EX",
	"yKB1lvzYuSnLbz3ahsxFvniWgcuiWK/XOabjPMRVMd3l4v3N1fWHv67PL/JF3kjXjvWWVsOlljFk8ECR",
	"RxY/5Yt8oZjQk8feQQk/p60MepQmlbC413u6WlGqwfOHRJIhejYtspgHbAcydYhmvJQCpw76mwpK+IPk",
	"PbJ8nA57jNiRUGQoPx0GVhEaO8RI3j6BdgNKuB8o6j9ThRRztYfsdSNxoGwayKN6P8w2af1Uwgn2r3J+",
	"VjD3QRul5xeLxawuVUC5Aez71tlUruILK6/NV/F+jFRDCT8Ue9cpJssp9uOYlHvwtsRWxp5MPVo7aYzO",
	"lEEx68bZxkjjeMI4VpirVBqXi8tvRnO0xSMUZxW52vhgKhQ0+ICuxWWbGEpDpgs6KZlxOSkojnNvBPnO",
	"rCmSoUeyg1A1TluNQyvfnznpwVjOrw+2CTrOTiGzNwU+MkFXkVBofMdudObnqXQOp2hyvHmKVIHE8nuo",
	"nr7Zcw++MUfePY+A6dHFWUG7rrwYjO13FP8Jpqmwc/JR0W+We1SHq3e+YjCScT4J+kzt68ygr3Y7k7+c",
	"JZjusPrOW+p58PTYkxWqDM2Y50ouNq7anvweYBL0sS/A7bj/qvnfvDOhHkdCgqlJbDM7sn6Y9obsqlc9",
	"+PSX/z9z5SOyfFujHY1TjYt7sq52VBlXmSoQ+zMx9Og4/cC6vPjl7Xml7JyZ5SBmjWx8ENPHYImZKvNE",
	"8n8x+e32nwAAAP//+H4AlwcMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./models/models.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
