// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// NewRefreshTask defines model for NewRefreshTask.
type NewRefreshTask struct {
	Base    string `json:"base"`
	Counter string `json:"counter"`
}

// QuoteData defines model for QuoteData.
type QuoteData struct {
	Ratio float64   `db:"ratio" json:"ratio"`
	Time  time.Time `db:"time" json:"time"`
}

// RefreshTask defines model for RefreshTask.
type RefreshTask struct {
	Id *int64 `json:"id,omitempty"`
}

// TaskResponseError defines model for TaskResponseError.
type TaskResponseError struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5SSQUvDQBCF/8vgcdeL4mFvgl4FS0+WCtNkkq42O+vsBKsl/102iRWSIu0lDLv7vvce",
	"mQMU3EQOFDSBO0AqttRgPz6KsOQhCkcS9dQfN5QS1pRH/YoEDpKKDzV0nQGhj9YLleBWx4dr8/uQN29U",
	"KHQGnuhzQZVQ2i4xvc9NNph6h4iqJAEcvK7Qft/bl/XhprsCM/U2UHAblOQi1SRx7/pHOhX8uWWlB1Sc",
	"ZxZUz3nY25rtqKx2jHp3Cwb2ljF6W3BJNQVLexW0inWvLTfgRkAOpb6hKSmfXS/zxTmsntBNCw4OI/9U",
	"vX9/ii/zt2JpUMGBD0OxEeKDUk0y5J9yM3BBKXJIdPFeGUiK2qbzV+6omHfMEh8qBhfa3c4ARwoYPTgA",
	"kxdnm4ab7icAAP//E6I7hxoDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
